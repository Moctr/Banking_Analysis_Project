use customer_banking


-- insert AGE column to Customers Table

alter table customers 
add Age smallint

update customers 
set Age = DATEDIFF(year , DOB,getdate())


ALTER TABLE Accounts
alter column balance decimal(10,2)

ALTER TABLE loans
alter column loan_amount decimal(10,2)



--  Calculate the Total Transaction Volume per Customer

select c.Customer_ID,
		c.Customer_Name,
		c.City,
		cast(SUM(t.amount) as decimal(10,2)) as total_transaction 
from customers c
inner join accounts a 
on c.Customer_ID =a.Customer_ID
inner join transactions t
on t.Account_ID = a.Account_ID
group by c.Customer_ID ,c.Customer_Name, City
order by total_transaction desc


-- 2) Find the average balance for each account type.

select 
	 account_type,
	CAST( AVG(balance) as decimal(10,2)) as average_balance
from accounts
group by Account_Type
order by average_balance desc


--3)Group customers by age brackets  and count the number in each bracket.

with age_bins as
(
select customer_ID,
	case
		when age between 18 and 23 then 'Adult'
		when age between 24 and 33 then 'Twnites'
		when age between 34 and 43 then 'Therties'
		when age between 44 and 53 then 'Fourties'
		else 'Retired'
	End as Age_Gp
from Customers
)
select age_gp,
		count(customer_ID) as Cust_Count
from age_bins
GROUP BY Age_Gp
order by Cust_Count desc


-- 4)List the top 5 customers with the highest total loan amounts.

select top 5 customer_ID,
	  cast(sum(loan_amount) as decimal(10,2)) as total_loan
from loans
group by customer_ID
order by total_loan desc


-- 5)Calculate the monthly transaction volume trend in 2023
select 
datename(month,transaction_date)  as months, 
 cast(sum(amount) as decimal(10,2))as  total_transaction_amount
from transactions
group by  datename(month,transaction_date)
order by total_transaction_amount desc


--6)Calculate the total interest income generated by each customer with his /her city.

select 
		c.Customer_ID,
		c.city,
		c.customer_name,
		cast(SUM(loan_amount * interest_rate / 100)as decimal(10,2)) as interest_income
from loans l
inner join customers c 
on c.Customer_ID = l.Customer_ID
group by  c.Customer_ID, c.City,c.Customer_Name
order by interest_income desc 

-- 7)Identify accounts that have had no transactions in this year

with LastTransaction as 
(
select distinct
	 account_Id,
	MAX(transaction_date) as last_transaction
from transactions
group by Account_ID
)
select a.account_id,
		c.Customer_Name,
		a.Account_Type,
		a.balance 
from accounts a 
left join LastTransaction t 
on t.Account_ID = a.Account_ID
left join customers c
on c.Customer_ID = a.Customer_ID
where t.last_transaction < '2023-01-01' 
	OR t.last_transaction is null


--8)Calculate the average number of transactions per customer .

with CustomerTransaction As
(
select 
	c.customer_id,
	count(t.Transaction_ID) as transactions_count
from customers c
join accounts a 
on a.Customer_ID = c.Customer_ID 
join transactions t 
on t.Account_ID = A.Account_ID
group by c.Customer_ID
)
select AVG(transactions_count) as Avg_Transactions_Per_Customer
from CustomerTransaction

--9)Calculate the total loan amount distributed across different cities.

select 
	 c.city,
	cast(sum(l.Loan_Amount) as decimal(10,2)) as total_loan_amount
from customers c
inner join loans l
on l.Customer_ID = c.Customer_ID
group by c.City
order by total_loan_amount desc


--10) Calculate the number of active vs dormant accounts per customer

with active_customers as
(
select 
	c.customer_id,
	count(distinct a.account_id) as account_count,
	count(distinct case when t.transaction_id is not null then a.Account_ID end)as Active_accounts,
	count(distinct case when t.transaction_id is  null then a.Account_ID end)as Dormant_accounts
from customers c
left join accounts a
on a.Customer_ID = c.Customer_ID
left join transactions t 
on t.Account_ID = a.Account_ID
group by c.Customer_ID
)
select * from active_customers



--11) Calculate the ratio of loan amount to deposit amount for each customer.

with LDR as 
(
select 
	c.customer_id,
	SUM(a.balance) as total_deposit,
	SUM(l.loan_amount) as total_loan,
	SUM(l.loan_amount) / NULLIF(SUM(a.balance),0) as loan_to_deposit_ratio
from customers c
left join accounts a
on a.Customer_ID = c.Customer_ID
left join loans l 
on l.Customer_ID = c.Customer_ID
group by c.Customer_ID
)
select * 
into LDR_TABLE 
from LDR
order by loan_to_deposit_ratio desc


-- 12) Analyze the average interest rate per loan type.

select 
	loan_type,
	AVG(interest_rate)as average_interest_rate
from loans
group by Loan_Type
order by average_interest_rate desc


-- 13)List the top 3 cities with the highest average account balance

select top(3)
	city ,
	AVG(a.balance) as average_acc_balance
from customers c
join accounts a 
on a.Customer_ID = c.Customer_ID
group by City
order by average_acc_balance desc

--14)Analyze the yearly trend in loan distribution across different loan types.
select
	year(loan_date)

--15) CLV 

with LoanInterest as
(
select 
	l.customer_ID,
	sum(l.loan_amount * (l.interest_Rate /100)) as total_Loan_Interest
from loans l
group by l.Customer_ID
),
DepositInterest as
(
select a.customer_id,
	   sum(balance * 0.01) as total_deposit_interest_cost
from accounts a
group by a.Customer_ID
),
TransactionFees as 
(
select a.customer_id,
	   count(t.amount * 3 ) as total_transaction_fees 
from transactions t
join accounts a
on a.Account_ID = t.Account_ID
group by a.Customer_ID
),
CLV as (
	select c.customer_id,
	coalesce(li.total_Loan_Interest ,'0') + coalesce(tf.total_transaction_fees ,'0') as total_Reveue,
	coalesce(di.total_deposit_interest_cost ,'0') as Total_Cost,
	coalesce(li.total_Loan_Interest,'0') - coalesce(di.total_deposit_interest_cost ,'0') as NIM
from customers c 
left join
	LoanInterest li  on li.Customer_ID = c.Customer_ID
left join 
	DepositInterest di on di.Customer_ID = c.Customer_ID
left join 
	TransactionFees tf on tf.Customer_ID = c.Customer_ID

)
select  *,
total_Reveue - Total_Cost as CLV_CUST
INTO CLV_TABLE
from CLV
order by CLV_CUST desc












